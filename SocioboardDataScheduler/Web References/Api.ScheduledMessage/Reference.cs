//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace SocioboardDataScheduler.Api.ScheduledMessage {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ScheduledMessageSoap", Namespace="http://tempuri.org/")]
    public partial class ScheduledMessage : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ADDScheduledMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateScheduledMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateScheduledMessageByMsgIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllScheduledMessageByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUnSentMessagesOfUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWooQueueMessageByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduleMessageByMessageIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMessageExistsAtTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScheduledMessageByProfileTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ScheduledMessage() {
            this.Url = global::SocioboardDataScheduler.Properties.Settings.Default.SocioboardDataScheduler_Api_ScheduledMessage_ScheduledMessage;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event ADDScheduledMessageCompletedEventHandler ADDScheduledMessageCompleted;
        
        /// <remarks/>
        public event UpdateScheduledMessageCompletedEventHandler UpdateScheduledMessageCompleted;
        
        /// <remarks/>
        public event UpdateScheduledMessageByMsgIdCompletedEventHandler UpdateScheduledMessageByMsgIdCompleted;
        
        /// <remarks/>
        public event GetAllScheduledMessageByUserIdCompletedEventHandler GetAllScheduledMessageByUserIdCompleted;
        
        /// <remarks/>
        public event GetAllUnSentMessagesOfUserCompletedEventHandler GetAllUnSentMessagesOfUserCompleted;
        
        /// <remarks/>
        public event GetWooQueueMessageByUserIdCompletedEventHandler GetWooQueueMessageByUserIdCompleted;
        
        /// <remarks/>
        public event GetScheduleMessageByMessageIdCompletedEventHandler GetScheduleMessageByMessageIdCompleted;
        
        /// <remarks/>
        public event CheckMessageExistsAtTimeCompletedEventHandler CheckMessageExistsAtTimeCompleted;
        
        /// <remarks/>
        public event getScheduledMessageByProfileTypeCompletedEventHandler getScheduledMessageByProfileTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] f, string fileName) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        f,
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(byte[] f, string fileName) {
            this.UploadFileAsync(f, fileName, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(byte[] f, string fileName, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        f,
                        fileName}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ADDScheduledMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ADDScheduledMessage(string typeandid, string ShareMessage, System.DateTime ClientTime, System.DateTime ScheduleTime, bool Status, string UserId, string PicUrl, System.DateTime CreateTime) {
            object[] results = this.Invoke("ADDScheduledMessage", new object[] {
                        typeandid,
                        ShareMessage,
                        ClientTime,
                        ScheduleTime,
                        Status,
                        UserId,
                        PicUrl,
                        CreateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ADDScheduledMessageAsync(string typeandid, string ShareMessage, System.DateTime ClientTime, System.DateTime ScheduleTime, bool Status, string UserId, string PicUrl, System.DateTime CreateTime) {
            this.ADDScheduledMessageAsync(typeandid, ShareMessage, ClientTime, ScheduleTime, Status, UserId, PicUrl, CreateTime, null);
        }
        
        /// <remarks/>
        public void ADDScheduledMessageAsync(string typeandid, string ShareMessage, System.DateTime ClientTime, System.DateTime ScheduleTime, bool Status, string UserId, string PicUrl, System.DateTime CreateTime, object userState) {
            if ((this.ADDScheduledMessageOperationCompleted == null)) {
                this.ADDScheduledMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnADDScheduledMessageOperationCompleted);
            }
            this.InvokeAsync("ADDScheduledMessage", new object[] {
                        typeandid,
                        ShareMessage,
                        ClientTime,
                        ScheduleTime,
                        Status,
                        UserId,
                        PicUrl,
                        CreateTime}, this.ADDScheduledMessageOperationCompleted, userState);
        }
        
        private void OnADDScheduledMessageOperationCompleted(object arg) {
            if ((this.ADDScheduledMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ADDScheduledMessageCompleted(this, new ADDScheduledMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScheduledMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateScheduledMessage(string typeidandmsgid, string ShareMessage, System.DateTime scheduledTime, string picurl) {
            object[] results = this.Invoke("UpdateScheduledMessage", new object[] {
                        typeidandmsgid,
                        ShareMessage,
                        scheduledTime,
                        picurl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateScheduledMessageAsync(string typeidandmsgid, string ShareMessage, System.DateTime scheduledTime, string picurl) {
            this.UpdateScheduledMessageAsync(typeidandmsgid, ShareMessage, scheduledTime, picurl, null);
        }
        
        /// <remarks/>
        public void UpdateScheduledMessageAsync(string typeidandmsgid, string ShareMessage, System.DateTime scheduledTime, string picurl, object userState) {
            if ((this.UpdateScheduledMessageOperationCompleted == null)) {
                this.UpdateScheduledMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScheduledMessageOperationCompleted);
            }
            this.InvokeAsync("UpdateScheduledMessage", new object[] {
                        typeidandmsgid,
                        ShareMessage,
                        scheduledTime,
                        picurl}, this.UpdateScheduledMessageOperationCompleted, userState);
        }
        
        private void OnUpdateScheduledMessageOperationCompleted(object arg) {
            if ((this.UpdateScheduledMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateScheduledMessageCompleted(this, new UpdateScheduledMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScheduledMessageByMsgId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateScheduledMessageByMsgId(System.Guid msgId) {
            this.Invoke("UpdateScheduledMessageByMsgId", new object[] {
                        msgId});
        }
        
        /// <remarks/>
        public void UpdateScheduledMessageByMsgIdAsync(System.Guid msgId) {
            this.UpdateScheduledMessageByMsgIdAsync(msgId, null);
        }
        
        /// <remarks/>
        public void UpdateScheduledMessageByMsgIdAsync(System.Guid msgId, object userState) {
            if ((this.UpdateScheduledMessageByMsgIdOperationCompleted == null)) {
                this.UpdateScheduledMessageByMsgIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScheduledMessageByMsgIdOperationCompleted);
            }
            this.InvokeAsync("UpdateScheduledMessageByMsgId", new object[] {
                        msgId}, this.UpdateScheduledMessageByMsgIdOperationCompleted, userState);
        }
        
        private void OnUpdateScheduledMessageByMsgIdOperationCompleted(object arg) {
            if ((this.UpdateScheduledMessageByMsgIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateScheduledMessageByMsgIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllScheduledMessageByUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllScheduledMessageByUserId(string UserId) {
            object[] results = this.Invoke("GetAllScheduledMessageByUserId", new object[] {
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllScheduledMessageByUserIdAsync(string UserId) {
            this.GetAllScheduledMessageByUserIdAsync(UserId, null);
        }
        
        /// <remarks/>
        public void GetAllScheduledMessageByUserIdAsync(string UserId, object userState) {
            if ((this.GetAllScheduledMessageByUserIdOperationCompleted == null)) {
                this.GetAllScheduledMessageByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllScheduledMessageByUserIdOperationCompleted);
            }
            this.InvokeAsync("GetAllScheduledMessageByUserId", new object[] {
                        UserId}, this.GetAllScheduledMessageByUserIdOperationCompleted, userState);
        }
        
        private void OnGetAllScheduledMessageByUserIdOperationCompleted(object arg) {
            if ((this.GetAllScheduledMessageByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllScheduledMessageByUserIdCompleted(this, new GetAllScheduledMessageByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllUnSentMessagesOfUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllUnSentMessagesOfUser(string UserId) {
            object[] results = this.Invoke("GetAllUnSentMessagesOfUser", new object[] {
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUnSentMessagesOfUserAsync(string UserId) {
            this.GetAllUnSentMessagesOfUserAsync(UserId, null);
        }
        
        /// <remarks/>
        public void GetAllUnSentMessagesOfUserAsync(string UserId, object userState) {
            if ((this.GetAllUnSentMessagesOfUserOperationCompleted == null)) {
                this.GetAllUnSentMessagesOfUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUnSentMessagesOfUserOperationCompleted);
            }
            this.InvokeAsync("GetAllUnSentMessagesOfUser", new object[] {
                        UserId}, this.GetAllUnSentMessagesOfUserOperationCompleted, userState);
        }
        
        private void OnGetAllUnSentMessagesOfUserOperationCompleted(object arg) {
            if ((this.GetAllUnSentMessagesOfUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUnSentMessagesOfUserCompleted(this, new GetAllUnSentMessagesOfUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWooQueueMessageByUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWooQueueMessageByUserId(string UserId) {
            object[] results = this.Invoke("GetWooQueueMessageByUserId", new object[] {
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWooQueueMessageByUserIdAsync(string UserId) {
            this.GetWooQueueMessageByUserIdAsync(UserId, null);
        }
        
        /// <remarks/>
        public void GetWooQueueMessageByUserIdAsync(string UserId, object userState) {
            if ((this.GetWooQueueMessageByUserIdOperationCompleted == null)) {
                this.GetWooQueueMessageByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWooQueueMessageByUserIdOperationCompleted);
            }
            this.InvokeAsync("GetWooQueueMessageByUserId", new object[] {
                        UserId}, this.GetWooQueueMessageByUserIdOperationCompleted, userState);
        }
        
        private void OnGetWooQueueMessageByUserIdOperationCompleted(object arg) {
            if ((this.GetWooQueueMessageByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWooQueueMessageByUserIdCompleted(this, new GetWooQueueMessageByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetScheduleMessageByMessageId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScheduleMessageByMessageId(string MessageId) {
            object[] results = this.Invoke("GetScheduleMessageByMessageId", new object[] {
                        MessageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScheduleMessageByMessageIdAsync(string MessageId) {
            this.GetScheduleMessageByMessageIdAsync(MessageId, null);
        }
        
        /// <remarks/>
        public void GetScheduleMessageByMessageIdAsync(string MessageId, object userState) {
            if ((this.GetScheduleMessageByMessageIdOperationCompleted == null)) {
                this.GetScheduleMessageByMessageIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleMessageByMessageIdOperationCompleted);
            }
            this.InvokeAsync("GetScheduleMessageByMessageId", new object[] {
                        MessageId}, this.GetScheduleMessageByMessageIdOperationCompleted, userState);
        }
        
        private void OnGetScheduleMessageByMessageIdOperationCompleted(object arg) {
            if ((this.GetScheduleMessageByMessageIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduleMessageByMessageIdCompleted(this, new GetScheduleMessageByMessageIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckMessageExistsAtTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckMessageExistsAtTime(string UserId, System.DateTime schetime) {
            object[] results = this.Invoke("CheckMessageExistsAtTime", new object[] {
                        UserId,
                        schetime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckMessageExistsAtTimeAsync(string UserId, System.DateTime schetime) {
            this.CheckMessageExistsAtTimeAsync(UserId, schetime, null);
        }
        
        /// <remarks/>
        public void CheckMessageExistsAtTimeAsync(string UserId, System.DateTime schetime, object userState) {
            if ((this.CheckMessageExistsAtTimeOperationCompleted == null)) {
                this.CheckMessageExistsAtTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMessageExistsAtTimeOperationCompleted);
            }
            this.InvokeAsync("CheckMessageExistsAtTime", new object[] {
                        UserId,
                        schetime}, this.CheckMessageExistsAtTimeOperationCompleted, userState);
        }
        
        private void OnCheckMessageExistsAtTimeOperationCompleted(object arg) {
            if ((this.CheckMessageExistsAtTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMessageExistsAtTimeCompleted(this, new CheckMessageExistsAtTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScheduledMessageByProfileType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getScheduledMessageByProfileType(string profileType) {
            object[] results = this.Invoke("getScheduledMessageByProfileType", new object[] {
                        profileType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getScheduledMessageByProfileTypeAsync(string profileType) {
            this.getScheduledMessageByProfileTypeAsync(profileType, null);
        }
        
        /// <remarks/>
        public void getScheduledMessageByProfileTypeAsync(string profileType, object userState) {
            if ((this.getScheduledMessageByProfileTypeOperationCompleted == null)) {
                this.getScheduledMessageByProfileTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScheduledMessageByProfileTypeOperationCompleted);
            }
            this.InvokeAsync("getScheduledMessageByProfileType", new object[] {
                        profileType}, this.getScheduledMessageByProfileTypeOperationCompleted, userState);
        }
        
        private void OngetScheduledMessageByProfileTypeOperationCompleted(object arg) {
            if ((this.getScheduledMessageByProfileTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScheduledMessageByProfileTypeCompleted(this, new getScheduledMessageByProfileTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ADDScheduledMessageCompletedEventHandler(object sender, ADDScheduledMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ADDScheduledMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ADDScheduledMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateScheduledMessageCompletedEventHandler(object sender, UpdateScheduledMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateScheduledMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateScheduledMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateScheduledMessageByMsgIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllScheduledMessageByUserIdCompletedEventHandler(object sender, GetAllScheduledMessageByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllScheduledMessageByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllScheduledMessageByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllUnSentMessagesOfUserCompletedEventHandler(object sender, GetAllUnSentMessagesOfUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUnSentMessagesOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUnSentMessagesOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetWooQueueMessageByUserIdCompletedEventHandler(object sender, GetWooQueueMessageByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWooQueueMessageByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWooQueueMessageByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetScheduleMessageByMessageIdCompletedEventHandler(object sender, GetScheduleMessageByMessageIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScheduleMessageByMessageIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduleMessageByMessageIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckMessageExistsAtTimeCompletedEventHandler(object sender, CheckMessageExistsAtTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMessageExistsAtTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMessageExistsAtTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getScheduledMessageByProfileTypeCompletedEventHandler(object sender, getScheduledMessageByProfileTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScheduledMessageByProfileTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScheduledMessageByProfileTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591