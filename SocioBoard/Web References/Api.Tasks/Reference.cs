//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace Socioboard.Api.Tasks {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TasksSoap", Namespace="http://tempuri.org/")]
    public partial class Tasks : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateNewTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewTaskForAnroidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTasksByUserIdTaskIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllTasksOfUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTaskByUserIdAndGroupIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllTasksCommentOfUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllTasksCommentOfUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewTaskWithGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewTaskWithGroupForAppsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeTaskStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskReadStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllIncompleteTaskofUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCompleteTaskofUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTeamTaskOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Tasks() {
            this.Url = global::Socioboard.Properties.Settings.Default.Socioboard_Api_Tasks_Tasks;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateNewTaskCompletedEventHandler CreateNewTaskCompleted;
        
        /// <remarks/>
        public event CreateNewTaskForAnroidCompletedEventHandler CreateNewTaskForAnroidCompleted;
        
        /// <remarks/>
        public event GetAllTasksCompletedEventHandler GetAllTasksCompleted;
        
        /// <remarks/>
        public event UpdateTasksByUserIdTaskIdCompletedEventHandler UpdateTasksByUserIdTaskIdCompleted;
        
        /// <remarks/>
        public event getAllTasksOfUserListCompletedEventHandler getAllTasksOfUserListCompleted;
        
        /// <remarks/>
        public event GetAllTaskByUserIdAndGroupIdCompletedEventHandler GetAllTaskByUserIdAndGroupIdCompleted;
        
        /// <remarks/>
        public event getAllTasksCommentOfUserCompletedEventHandler getAllTasksCommentOfUserCompleted;
        
        /// <remarks/>
        public event getAllTasksCommentOfUserListCompletedEventHandler getAllTasksCommentOfUserListCompleted;
        
        /// <remarks/>
        public event addTaskCompletedEventHandler addTaskCompleted;
        
        /// <remarks/>
        public event AddNewTaskWithGroupCompletedEventHandler AddNewTaskWithGroupCompleted;
        
        /// <remarks/>
        public event AddNewTaskWithGroupForAppsCompletedEventHandler AddNewTaskWithGroupForAppsCompleted;
        
        /// <remarks/>
        public event ChangeTaskStatusCompletedEventHandler ChangeTaskStatusCompleted;
        
        /// <remarks/>
        public event DeleteTaskCompletedEventHandler DeleteTaskCompleted;
        
        /// <remarks/>
        public event UpdateTaskReadStatusCompletedEventHandler UpdateTaskReadStatusCompleted;
        
        /// <remarks/>
        public event GetAllIncompleteTaskofUserCompletedEventHandler GetAllIncompleteTaskofUserCompleted;
        
        /// <remarks/>
        public event GetAllCompleteTaskofUserCompletedEventHandler GetAllCompleteTaskofUserCompleted;
        
        /// <remarks/>
        public event GetAllTeamTaskCompletedEventHandler GetAllTeamTaskCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateNewTask(string description, string userid, Tasks1 task, string assigntoId, string comment) {
            this.Invoke("CreateNewTask", new object[] {
                        description,
                        userid,
                        task,
                        assigntoId,
                        comment});
        }
        
        /// <remarks/>
        public void CreateNewTaskAsync(string description, string userid, Tasks1 task, string assigntoId, string comment) {
            this.CreateNewTaskAsync(description, userid, task, assigntoId, comment, null);
        }
        
        /// <remarks/>
        public void CreateNewTaskAsync(string description, string userid, Tasks1 task, string assigntoId, string comment, object userState) {
            if ((this.CreateNewTaskOperationCompleted == null)) {
                this.CreateNewTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTaskOperationCompleted);
            }
            this.InvokeAsync("CreateNewTask", new object[] {
                        description,
                        userid,
                        task,
                        assigntoId,
                        comment}, this.CreateNewTaskOperationCompleted, userState);
        }
        
        private void OnCreateNewTaskOperationCompleted(object arg) {
            if ((this.CreateNewTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewTaskForAnroid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateNewTaskForAnroid(string description, string userid, string assigntoId, string comment) {
            this.Invoke("CreateNewTaskForAnroid", new object[] {
                        description,
                        userid,
                        assigntoId,
                        comment});
        }
        
        /// <remarks/>
        public void CreateNewTaskForAnroidAsync(string description, string userid, string assigntoId, string comment) {
            this.CreateNewTaskForAnroidAsync(description, userid, assigntoId, comment, null);
        }
        
        /// <remarks/>
        public void CreateNewTaskForAnroidAsync(string description, string userid, string assigntoId, string comment, object userState) {
            if ((this.CreateNewTaskForAnroidOperationCompleted == null)) {
                this.CreateNewTaskForAnroidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTaskForAnroidOperationCompleted);
            }
            this.InvokeAsync("CreateNewTaskForAnroid", new object[] {
                        description,
                        userid,
                        assigntoId,
                        comment}, this.CreateNewTaskForAnroidOperationCompleted, userState);
        }
        
        private void OnCreateNewTaskForAnroidOperationCompleted(object arg) {
            if ((this.CreateNewTaskForAnroidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTaskForAnroidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllTasks(string custid) {
            object[] results = this.Invoke("GetAllTasks", new object[] {
                        custid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTasksAsync(string custid) {
            this.GetAllTasksAsync(custid, null);
        }
        
        /// <remarks/>
        public void GetAllTasksAsync(string custid, object userState) {
            if ((this.GetAllTasksOperationCompleted == null)) {
                this.GetAllTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTasksOperationCompleted);
            }
            this.InvokeAsync("GetAllTasks", new object[] {
                        custid}, this.GetAllTasksOperationCompleted, userState);
        }
        
        private void OnGetAllTasksOperationCompleted(object arg) {
            if ((this.GetAllTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTasksCompleted(this, new GetAllTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTasksByUserIdTaskId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTasksByUserIdTaskId(string taskMessage, string assignTaskTo, string taskStatus, System.DateTime assignDate, string taskId, string userId) {
            object[] results = this.Invoke("UpdateTasksByUserIdTaskId", new object[] {
                        taskMessage,
                        assignTaskTo,
                        taskStatus,
                        assignDate,
                        taskId,
                        userId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTasksByUserIdTaskIdAsync(string taskMessage, string assignTaskTo, string taskStatus, System.DateTime assignDate, string taskId, string userId) {
            this.UpdateTasksByUserIdTaskIdAsync(taskMessage, assignTaskTo, taskStatus, assignDate, taskId, userId, null);
        }
        
        /// <remarks/>
        public void UpdateTasksByUserIdTaskIdAsync(string taskMessage, string assignTaskTo, string taskStatus, System.DateTime assignDate, string taskId, string userId, object userState) {
            if ((this.UpdateTasksByUserIdTaskIdOperationCompleted == null)) {
                this.UpdateTasksByUserIdTaskIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTasksByUserIdTaskIdOperationCompleted);
            }
            this.InvokeAsync("UpdateTasksByUserIdTaskId", new object[] {
                        taskMessage,
                        assignTaskTo,
                        taskStatus,
                        assignDate,
                        taskId,
                        userId}, this.UpdateTasksByUserIdTaskIdOperationCompleted, userState);
        }
        
        private void OnUpdateTasksByUserIdTaskIdOperationCompleted(object arg) {
            if ((this.UpdateTasksByUserIdTaskIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTasksByUserIdTaskIdCompleted(this, new UpdateTasksByUserIdTaskIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllTasksOfUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAllTasksOfUserList(string userid, string groupid) {
            object[] results = this.Invoke("getAllTasksOfUserList", new object[] {
                        userid,
                        groupid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllTasksOfUserListAsync(string userid, string groupid) {
            this.getAllTasksOfUserListAsync(userid, groupid, null);
        }
        
        /// <remarks/>
        public void getAllTasksOfUserListAsync(string userid, string groupid, object userState) {
            if ((this.getAllTasksOfUserListOperationCompleted == null)) {
                this.getAllTasksOfUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTasksOfUserListOperationCompleted);
            }
            this.InvokeAsync("getAllTasksOfUserList", new object[] {
                        userid,
                        groupid}, this.getAllTasksOfUserListOperationCompleted, userState);
        }
        
        private void OngetAllTasksOfUserListOperationCompleted(object arg) {
            if ((this.getAllTasksOfUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllTasksOfUserListCompleted(this, new getAllTasksOfUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTaskByUserIdAndGroupId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllTaskByUserIdAndGroupId(string userid, string username, string profileurl, string days, string groupid) {
            object[] results = this.Invoke("GetAllTaskByUserIdAndGroupId", new object[] {
                        userid,
                        username,
                        profileurl,
                        days,
                        groupid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTaskByUserIdAndGroupIdAsync(string userid, string username, string profileurl, string days, string groupid) {
            this.GetAllTaskByUserIdAndGroupIdAsync(userid, username, profileurl, days, groupid, null);
        }
        
        /// <remarks/>
        public void GetAllTaskByUserIdAndGroupIdAsync(string userid, string username, string profileurl, string days, string groupid, object userState) {
            if ((this.GetAllTaskByUserIdAndGroupIdOperationCompleted == null)) {
                this.GetAllTaskByUserIdAndGroupIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTaskByUserIdAndGroupIdOperationCompleted);
            }
            this.InvokeAsync("GetAllTaskByUserIdAndGroupId", new object[] {
                        userid,
                        username,
                        profileurl,
                        days,
                        groupid}, this.GetAllTaskByUserIdAndGroupIdOperationCompleted, userState);
        }
        
        private void OnGetAllTaskByUserIdAndGroupIdOperationCompleted(object arg) {
            if ((this.GetAllTaskByUserIdAndGroupIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTaskByUserIdAndGroupIdCompleted(this, new GetAllTaskByUserIdAndGroupIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllTasksCommentOfUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAllTasksCommentOfUser(string taskid) {
            object[] results = this.Invoke("getAllTasksCommentOfUser", new object[] {
                        taskid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllTasksCommentOfUserAsync(string taskid) {
            this.getAllTasksCommentOfUserAsync(taskid, null);
        }
        
        /// <remarks/>
        public void getAllTasksCommentOfUserAsync(string taskid, object userState) {
            if ((this.getAllTasksCommentOfUserOperationCompleted == null)) {
                this.getAllTasksCommentOfUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTasksCommentOfUserOperationCompleted);
            }
            this.InvokeAsync("getAllTasksCommentOfUser", new object[] {
                        taskid}, this.getAllTasksCommentOfUserOperationCompleted, userState);
        }
        
        private void OngetAllTasksCommentOfUserOperationCompleted(object arg) {
            if ((this.getAllTasksCommentOfUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllTasksCommentOfUserCompleted(this, new getAllTasksCommentOfUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllTasksCommentOfUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAllTasksCommentOfUserList(string taskid) {
            object[] results = this.Invoke("getAllTasksCommentOfUserList", new object[] {
                        taskid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllTasksCommentOfUserListAsync(string taskid) {
            this.getAllTasksCommentOfUserListAsync(taskid, null);
        }
        
        /// <remarks/>
        public void getAllTasksCommentOfUserListAsync(string taskid, object userState) {
            if ((this.getAllTasksCommentOfUserListOperationCompleted == null)) {
                this.getAllTasksCommentOfUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTasksCommentOfUserListOperationCompleted);
            }
            this.InvokeAsync("getAllTasksCommentOfUserList", new object[] {
                        taskid}, this.getAllTasksCommentOfUserListOperationCompleted, userState);
        }
        
        private void OngetAllTasksCommentOfUserListOperationCompleted(object arg) {
            if ((this.getAllTasksCommentOfUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllTasksCommentOfUserListCompleted(this, new getAllTasksCommentOfUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addTask(string description, string userid, Tasks1 task, string assigntoId, string comment, string AssignDate) {
            this.Invoke("addTask", new object[] {
                        description,
                        userid,
                        task,
                        assigntoId,
                        comment,
                        AssignDate});
        }
        
        /// <remarks/>
        public void addTaskAsync(string description, string userid, Tasks1 task, string assigntoId, string comment, string AssignDate) {
            this.addTaskAsync(description, userid, task, assigntoId, comment, AssignDate, null);
        }
        
        /// <remarks/>
        public void addTaskAsync(string description, string userid, Tasks1 task, string assigntoId, string comment, string AssignDate, object userState) {
            if ((this.addTaskOperationCompleted == null)) {
                this.addTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTaskOperationCompleted);
            }
            this.InvokeAsync("addTask", new object[] {
                        description,
                        userid,
                        task,
                        assigntoId,
                        comment,
                        AssignDate}, this.addTaskOperationCompleted, userState);
        }
        
        private void OnaddTaskOperationCompleted(object arg) {
            if ((this.addTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewTaskWithGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewTaskWithGroup(string description, string messagedate, string userid, Tasks1 task, string assigntoId, string comment, string AssignDate, string groupid) {
            this.Invoke("AddNewTaskWithGroup", new object[] {
                        description,
                        messagedate,
                        userid,
                        task,
                        assigntoId,
                        comment,
                        AssignDate,
                        groupid});
        }
        
        /// <remarks/>
        public void AddNewTaskWithGroupAsync(string description, string messagedate, string userid, Tasks1 task, string assigntoId, string comment, string AssignDate, string groupid) {
            this.AddNewTaskWithGroupAsync(description, messagedate, userid, task, assigntoId, comment, AssignDate, groupid, null);
        }
        
        /// <remarks/>
        public void AddNewTaskWithGroupAsync(string description, string messagedate, string userid, Tasks1 task, string assigntoId, string comment, string AssignDate, string groupid, object userState) {
            if ((this.AddNewTaskWithGroupOperationCompleted == null)) {
                this.AddNewTaskWithGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewTaskWithGroupOperationCompleted);
            }
            this.InvokeAsync("AddNewTaskWithGroup", new object[] {
                        description,
                        messagedate,
                        userid,
                        task,
                        assigntoId,
                        comment,
                        AssignDate,
                        groupid}, this.AddNewTaskWithGroupOperationCompleted, userState);
        }
        
        private void OnAddNewTaskWithGroupOperationCompleted(object arg) {
            if ((this.AddNewTaskWithGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewTaskWithGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewTaskWithGroupForApps", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddNewTaskWithGroupForApps(string description, string messagedate, string userid, string assigntoId, string comment, string groupid) {
            object[] results = this.Invoke("AddNewTaskWithGroupForApps", new object[] {
                        description,
                        messagedate,
                        userid,
                        assigntoId,
                        comment,
                        groupid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewTaskWithGroupForAppsAsync(string description, string messagedate, string userid, string assigntoId, string comment, string groupid) {
            this.AddNewTaskWithGroupForAppsAsync(description, messagedate, userid, assigntoId, comment, groupid, null);
        }
        
        /// <remarks/>
        public void AddNewTaskWithGroupForAppsAsync(string description, string messagedate, string userid, string assigntoId, string comment, string groupid, object userState) {
            if ((this.AddNewTaskWithGroupForAppsOperationCompleted == null)) {
                this.AddNewTaskWithGroupForAppsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewTaskWithGroupForAppsOperationCompleted);
            }
            this.InvokeAsync("AddNewTaskWithGroupForApps", new object[] {
                        description,
                        messagedate,
                        userid,
                        assigntoId,
                        comment,
                        groupid}, this.AddNewTaskWithGroupForAppsOperationCompleted, userState);
        }
        
        private void OnAddNewTaskWithGroupForAppsOperationCompleted(object arg) {
            if ((this.AddNewTaskWithGroupForAppsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewTaskWithGroupForAppsCompleted(this, new AddNewTaskWithGroupForAppsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeTaskStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeTaskStatus(string UserId, string TaskId, string Status) {
            object[] results = this.Invoke("ChangeTaskStatus", new object[] {
                        UserId,
                        TaskId,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeTaskStatusAsync(string UserId, string TaskId, string Status) {
            this.ChangeTaskStatusAsync(UserId, TaskId, Status, null);
        }
        
        /// <remarks/>
        public void ChangeTaskStatusAsync(string UserId, string TaskId, string Status, object userState) {
            if ((this.ChangeTaskStatusOperationCompleted == null)) {
                this.ChangeTaskStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeTaskStatusOperationCompleted);
            }
            this.InvokeAsync("ChangeTaskStatus", new object[] {
                        UserId,
                        TaskId,
                        Status}, this.ChangeTaskStatusOperationCompleted, userState);
        }
        
        private void OnChangeTaskStatusOperationCompleted(object arg) {
            if ((this.ChangeTaskStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeTaskStatusCompleted(this, new ChangeTaskStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteTask(string TaskId) {
            object[] results = this.Invoke("DeleteTask", new object[] {
                        TaskId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(string TaskId) {
            this.DeleteTaskAsync(TaskId, null);
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(string TaskId, object userState) {
            if ((this.DeleteTaskOperationCompleted == null)) {
                this.DeleteTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskOperationCompleted);
            }
            this.InvokeAsync("DeleteTask", new object[] {
                        TaskId}, this.DeleteTaskOperationCompleted, userState);
        }
        
        private void OnDeleteTaskOperationCompleted(object arg) {
            if ((this.DeleteTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskCompleted(this, new DeleteTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTaskReadStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateTaskReadStatus(string TaskId, string UserId, string GroupId) {
            object[] results = this.Invoke("UpdateTaskReadStatus", new object[] {
                        TaskId,
                        UserId,
                        GroupId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTaskReadStatusAsync(string TaskId, string UserId, string GroupId) {
            this.UpdateTaskReadStatusAsync(TaskId, UserId, GroupId, null);
        }
        
        /// <remarks/>
        public void UpdateTaskReadStatusAsync(string TaskId, string UserId, string GroupId, object userState) {
            if ((this.UpdateTaskReadStatusOperationCompleted == null)) {
                this.UpdateTaskReadStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskReadStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskReadStatus", new object[] {
                        TaskId,
                        UserId,
                        GroupId}, this.UpdateTaskReadStatusOperationCompleted, userState);
        }
        
        private void OnUpdateTaskReadStatusOperationCompleted(object arg) {
            if ((this.UpdateTaskReadStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskReadStatusCompleted(this, new UpdateTaskReadStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllIncompleteTaskofUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllIncompleteTaskofUser(string userid, string groupid) {
            object[] results = this.Invoke("GetAllIncompleteTaskofUser", new object[] {
                        userid,
                        groupid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllIncompleteTaskofUserAsync(string userid, string groupid) {
            this.GetAllIncompleteTaskofUserAsync(userid, groupid, null);
        }
        
        /// <remarks/>
        public void GetAllIncompleteTaskofUserAsync(string userid, string groupid, object userState) {
            if ((this.GetAllIncompleteTaskofUserOperationCompleted == null)) {
                this.GetAllIncompleteTaskofUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllIncompleteTaskofUserOperationCompleted);
            }
            this.InvokeAsync("GetAllIncompleteTaskofUser", new object[] {
                        userid,
                        groupid}, this.GetAllIncompleteTaskofUserOperationCompleted, userState);
        }
        
        private void OnGetAllIncompleteTaskofUserOperationCompleted(object arg) {
            if ((this.GetAllIncompleteTaskofUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllIncompleteTaskofUserCompleted(this, new GetAllIncompleteTaskofUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllCompleteTaskofUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllCompleteTaskofUser(string userid, string groupid) {
            object[] results = this.Invoke("GetAllCompleteTaskofUser", new object[] {
                        userid,
                        groupid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCompleteTaskofUserAsync(string userid, string groupid) {
            this.GetAllCompleteTaskofUserAsync(userid, groupid, null);
        }
        
        /// <remarks/>
        public void GetAllCompleteTaskofUserAsync(string userid, string groupid, object userState) {
            if ((this.GetAllCompleteTaskofUserOperationCompleted == null)) {
                this.GetAllCompleteTaskofUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCompleteTaskofUserOperationCompleted);
            }
            this.InvokeAsync("GetAllCompleteTaskofUser", new object[] {
                        userid,
                        groupid}, this.GetAllCompleteTaskofUserOperationCompleted, userState);
        }
        
        private void OnGetAllCompleteTaskofUserOperationCompleted(object arg) {
            if ((this.GetAllCompleteTaskofUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCompleteTaskofUserCompleted(this, new GetAllCompleteTaskofUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTeamTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllTeamTask(string userid, string groupid) {
            object[] results = this.Invoke("GetAllTeamTask", new object[] {
                        userid,
                        groupid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTeamTaskAsync(string userid, string groupid) {
            this.GetAllTeamTaskAsync(userid, groupid, null);
        }
        
        /// <remarks/>
        public void GetAllTeamTaskAsync(string userid, string groupid, object userState) {
            if ((this.GetAllTeamTaskOperationCompleted == null)) {
                this.GetAllTeamTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTeamTaskOperationCompleted);
            }
            this.InvokeAsync("GetAllTeamTask", new object[] {
                        userid,
                        groupid}, this.GetAllTeamTaskOperationCompleted, userState);
        }
        
        private void OnGetAllTeamTaskOperationCompleted(object arg) {
            if ((this.GetAllTeamTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTeamTaskCompleted(this, new GetAllTeamTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Tasks", Namespace="http://tempuri.org/")]
    public partial class Tasks1 {
        
        private System.Guid idField;
        
        private System.Guid groupIdField;
        
        private string taskMessageField;
        
        private System.Guid userIdField;
        
        private System.Guid assignTaskToField;
        
        private bool taskStatusField;
        
        private System.DateTime assignDateField;
        
        private System.DateTime completionDateField;
        
        private int readStatusField;
        
        private System.DateTime taskMessageDateField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid GroupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        public string TaskMessage {
            get {
                return this.taskMessageField;
            }
            set {
                this.taskMessageField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid AssignTaskTo {
            get {
                return this.assignTaskToField;
            }
            set {
                this.assignTaskToField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskStatus {
            get {
                return this.taskStatusField;
            }
            set {
                this.taskStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AssignDate {
            get {
                return this.assignDateField;
            }
            set {
                this.assignDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CompletionDate {
            get {
                return this.completionDateField;
            }
            set {
                this.completionDateField = value;
            }
        }
        
        /// <remarks/>
        public int ReadStatus {
            get {
                return this.readStatusField;
            }
            set {
                this.readStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TaskMessageDate {
            get {
                return this.taskMessageDateField;
            }
            set {
                this.taskMessageDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateNewTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateNewTaskForAnroidCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllTasksCompletedEventHandler(object sender, GetAllTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateTasksByUserIdTaskIdCompletedEventHandler(object sender, UpdateTasksByUserIdTaskIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTasksByUserIdTaskIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTasksByUserIdTaskIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getAllTasksOfUserListCompletedEventHandler(object sender, getAllTasksOfUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllTasksOfUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllTasksOfUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllTaskByUserIdAndGroupIdCompletedEventHandler(object sender, GetAllTaskByUserIdAndGroupIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTaskByUserIdAndGroupIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTaskByUserIdAndGroupIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getAllTasksCommentOfUserCompletedEventHandler(object sender, getAllTasksCommentOfUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllTasksCommentOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllTasksCommentOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void getAllTasksCommentOfUserListCompletedEventHandler(object sender, getAllTasksCommentOfUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllTasksCommentOfUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllTasksCommentOfUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void addTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddNewTaskWithGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddNewTaskWithGroupForAppsCompletedEventHandler(object sender, AddNewTaskWithGroupForAppsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewTaskWithGroupForAppsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewTaskWithGroupForAppsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChangeTaskStatusCompletedEventHandler(object sender, ChangeTaskStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeTaskStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeTaskStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteTaskCompletedEventHandler(object sender, DeleteTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateTaskReadStatusCompletedEventHandler(object sender, UpdateTaskReadStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTaskReadStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTaskReadStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllIncompleteTaskofUserCompletedEventHandler(object sender, GetAllIncompleteTaskofUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllIncompleteTaskofUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllIncompleteTaskofUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllCompleteTaskofUserCompletedEventHandler(object sender, GetAllCompleteTaskofUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCompleteTaskofUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCompleteTaskofUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAllTeamTaskCompletedEventHandler(object sender, GetAllTeamTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTeamTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTeamTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591