//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ReportDataServices.Api.SentimentalAnalysis {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SentimentalAnalysisSoap", Namespace="http://tempuri.org/")]
    public partial class SentimentalAnalysis : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPostSentimentsFromUclassifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllNegativeFeedsOfProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAssignedStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNegativeFeedsOfUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketsofGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback FeedSentimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FacebookFeedSentimetOperationCompleted;
        
        private System.Threading.SendOrPostCallback FacebookMessageSentimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback TwitterMessageSentimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback TwitterFeedSentimentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SentimentalAnalysis() {
            this.Url = global::ReportDataServices.Properties.Settings.Default.ReportDataServices_Api_SentimentalAnalysis_SentimentalAnalysis;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPostSentimentsFromUclassifyCompletedEventHandler GetPostSentimentsFromUclassifyCompleted;
        
        /// <remarks/>
        public event getAllNegativeFeedsOfProfileCompletedEventHandler getAllNegativeFeedsOfProfileCompleted;
        
        /// <remarks/>
        public event updateAssignedStatusCompletedEventHandler updateAssignedStatusCompleted;
        
        /// <remarks/>
        public event getNegativeFeedsOfUserCompletedEventHandler getNegativeFeedsOfUserCompleted;
        
        /// <remarks/>
        public event GetTicketsofGroupCompletedEventHandler GetTicketsofGroupCompleted;
        
        /// <remarks/>
        public event FeedSentimentCompletedEventHandler FeedSentimentCompleted;
        
        /// <remarks/>
        public event FacebookFeedSentimetCompletedEventHandler FacebookFeedSentimetCompleted;
        
        /// <remarks/>
        public event FacebookMessageSentimentCompletedEventHandler FacebookMessageSentimentCompleted;
        
        /// <remarks/>
        public event TwitterMessageSentimentCompletedEventHandler TwitterMessageSentimentCompleted;
        
        /// <remarks/>
        public event TwitterFeedSentimentCompletedEventHandler TwitterFeedSentimentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPostSentimentsFromUclassify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPostSentimentsFromUclassify(System.Guid Userid, string profileid, string feedId, string Message, string Network) {
            object[] results = this.Invoke("GetPostSentimentsFromUclassify", new object[] {
                        Userid,
                        profileid,
                        feedId,
                        Message,
                        Network});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostSentimentsFromUclassifyAsync(System.Guid Userid, string profileid, string feedId, string Message, string Network) {
            this.GetPostSentimentsFromUclassifyAsync(Userid, profileid, feedId, Message, Network, null);
        }
        
        /// <remarks/>
        public void GetPostSentimentsFromUclassifyAsync(System.Guid Userid, string profileid, string feedId, string Message, string Network, object userState) {
            if ((this.GetPostSentimentsFromUclassifyOperationCompleted == null)) {
                this.GetPostSentimentsFromUclassifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostSentimentsFromUclassifyOperationCompleted);
            }
            this.InvokeAsync("GetPostSentimentsFromUclassify", new object[] {
                        Userid,
                        profileid,
                        feedId,
                        Message,
                        Network}, this.GetPostSentimentsFromUclassifyOperationCompleted, userState);
        }
        
        private void OnGetPostSentimentsFromUclassifyOperationCompleted(object arg) {
            if ((this.GetPostSentimentsFromUclassifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostSentimentsFromUclassifyCompleted(this, new GetPostSentimentsFromUclassifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllNegativeFeedsOfProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAllNegativeFeedsOfProfile() {
            object[] results = this.Invoke("getAllNegativeFeedsOfProfile", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllNegativeFeedsOfProfileAsync() {
            this.getAllNegativeFeedsOfProfileAsync(null);
        }
        
        /// <remarks/>
        public void getAllNegativeFeedsOfProfileAsync(object userState) {
            if ((this.getAllNegativeFeedsOfProfileOperationCompleted == null)) {
                this.getAllNegativeFeedsOfProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllNegativeFeedsOfProfileOperationCompleted);
            }
            this.InvokeAsync("getAllNegativeFeedsOfProfile", new object[0], this.getAllNegativeFeedsOfProfileOperationCompleted, userState);
        }
        
        private void OngetAllNegativeFeedsOfProfileOperationCompleted(object arg) {
            if ((this.getAllNegativeFeedsOfProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllNegativeFeedsOfProfileCompleted(this, new getAllNegativeFeedsOfProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateAssignedStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updateAssignedStatus(string Id, string AssignedUserId) {
            object[] results = this.Invoke("updateAssignedStatus", new object[] {
                        Id,
                        AssignedUserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateAssignedStatusAsync(string Id, string AssignedUserId) {
            this.updateAssignedStatusAsync(Id, AssignedUserId, null);
        }
        
        /// <remarks/>
        public void updateAssignedStatusAsync(string Id, string AssignedUserId, object userState) {
            if ((this.updateAssignedStatusOperationCompleted == null)) {
                this.updateAssignedStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAssignedStatusOperationCompleted);
            }
            this.InvokeAsync("updateAssignedStatus", new object[] {
                        Id,
                        AssignedUserId}, this.updateAssignedStatusOperationCompleted, userState);
        }
        
        private void OnupdateAssignedStatusOperationCompleted(object arg) {
            if ((this.updateAssignedStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAssignedStatusCompleted(this, new updateAssignedStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNegativeFeedsOfUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getNegativeFeedsOfUser(string UserId) {
            object[] results = this.Invoke("getNegativeFeedsOfUser", new object[] {
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getNegativeFeedsOfUserAsync(string UserId) {
            this.getNegativeFeedsOfUserAsync(UserId, null);
        }
        
        /// <remarks/>
        public void getNegativeFeedsOfUserAsync(string UserId, object userState) {
            if ((this.getNegativeFeedsOfUserOperationCompleted == null)) {
                this.getNegativeFeedsOfUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNegativeFeedsOfUserOperationCompleted);
            }
            this.InvokeAsync("getNegativeFeedsOfUser", new object[] {
                        UserId}, this.getNegativeFeedsOfUserOperationCompleted, userState);
        }
        
        private void OngetNegativeFeedsOfUserOperationCompleted(object arg) {
            if ((this.getNegativeFeedsOfUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNegativeFeedsOfUserCompleted(this, new getNegativeFeedsOfUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTicketsofGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTicketsofGroup(string GroupId, string UserId) {
            object[] results = this.Invoke("GetTicketsofGroup", new object[] {
                        GroupId,
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketsofGroupAsync(string GroupId, string UserId) {
            this.GetTicketsofGroupAsync(GroupId, UserId, null);
        }
        
        /// <remarks/>
        public void GetTicketsofGroupAsync(string GroupId, string UserId, object userState) {
            if ((this.GetTicketsofGroupOperationCompleted == null)) {
                this.GetTicketsofGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketsofGroupOperationCompleted);
            }
            this.InvokeAsync("GetTicketsofGroup", new object[] {
                        GroupId,
                        UserId}, this.GetTicketsofGroupOperationCompleted, userState);
        }
        
        private void OnGetTicketsofGroupOperationCompleted(object arg) {
            if ((this.GetTicketsofGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketsofGroupCompleted(this, new GetTicketsofGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FeedSentiment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FeedSentiment(string startedIndex, string count) {
            object[] results = this.Invoke("FeedSentiment", new object[] {
                        startedIndex,
                        count});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FeedSentimentAsync(string startedIndex, string count) {
            this.FeedSentimentAsync(startedIndex, count, null);
        }
        
        /// <remarks/>
        public void FeedSentimentAsync(string startedIndex, string count, object userState) {
            if ((this.FeedSentimentOperationCompleted == null)) {
                this.FeedSentimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFeedSentimentOperationCompleted);
            }
            this.InvokeAsync("FeedSentiment", new object[] {
                        startedIndex,
                        count}, this.FeedSentimentOperationCompleted, userState);
        }
        
        private void OnFeedSentimentOperationCompleted(object arg) {
            if ((this.FeedSentimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FeedSentimentCompleted(this, new FeedSentimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FacebookFeedSentimet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FacebookFeedSentimet(string startedIndex, string count) {
            object[] results = this.Invoke("FacebookFeedSentimet", new object[] {
                        startedIndex,
                        count});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FacebookFeedSentimetAsync(string startedIndex, string count) {
            this.FacebookFeedSentimetAsync(startedIndex, count, null);
        }
        
        /// <remarks/>
        public void FacebookFeedSentimetAsync(string startedIndex, string count, object userState) {
            if ((this.FacebookFeedSentimetOperationCompleted == null)) {
                this.FacebookFeedSentimetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFacebookFeedSentimetOperationCompleted);
            }
            this.InvokeAsync("FacebookFeedSentimet", new object[] {
                        startedIndex,
                        count}, this.FacebookFeedSentimetOperationCompleted, userState);
        }
        
        private void OnFacebookFeedSentimetOperationCompleted(object arg) {
            if ((this.FacebookFeedSentimetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FacebookFeedSentimetCompleted(this, new FacebookFeedSentimetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FacebookMessageSentiment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FacebookMessageSentiment(string startedIndex, string count) {
            object[] results = this.Invoke("FacebookMessageSentiment", new object[] {
                        startedIndex,
                        count});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FacebookMessageSentimentAsync(string startedIndex, string count) {
            this.FacebookMessageSentimentAsync(startedIndex, count, null);
        }
        
        /// <remarks/>
        public void FacebookMessageSentimentAsync(string startedIndex, string count, object userState) {
            if ((this.FacebookMessageSentimentOperationCompleted == null)) {
                this.FacebookMessageSentimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFacebookMessageSentimentOperationCompleted);
            }
            this.InvokeAsync("FacebookMessageSentiment", new object[] {
                        startedIndex,
                        count}, this.FacebookMessageSentimentOperationCompleted, userState);
        }
        
        private void OnFacebookMessageSentimentOperationCompleted(object arg) {
            if ((this.FacebookMessageSentimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FacebookMessageSentimentCompleted(this, new FacebookMessageSentimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TwitterMessageSentiment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TwitterMessageSentiment(string startedIndex, string count) {
            object[] results = this.Invoke("TwitterMessageSentiment", new object[] {
                        startedIndex,
                        count});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TwitterMessageSentimentAsync(string startedIndex, string count) {
            this.TwitterMessageSentimentAsync(startedIndex, count, null);
        }
        
        /// <remarks/>
        public void TwitterMessageSentimentAsync(string startedIndex, string count, object userState) {
            if ((this.TwitterMessageSentimentOperationCompleted == null)) {
                this.TwitterMessageSentimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTwitterMessageSentimentOperationCompleted);
            }
            this.InvokeAsync("TwitterMessageSentiment", new object[] {
                        startedIndex,
                        count}, this.TwitterMessageSentimentOperationCompleted, userState);
        }
        
        private void OnTwitterMessageSentimentOperationCompleted(object arg) {
            if ((this.TwitterMessageSentimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TwitterMessageSentimentCompleted(this, new TwitterMessageSentimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TwitterFeedSentiment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TwitterFeedSentiment(string startedIndex, string count) {
            object[] results = this.Invoke("TwitterFeedSentiment", new object[] {
                        startedIndex,
                        count});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TwitterFeedSentimentAsync(string startedIndex, string count) {
            this.TwitterFeedSentimentAsync(startedIndex, count, null);
        }
        
        /// <remarks/>
        public void TwitterFeedSentimentAsync(string startedIndex, string count, object userState) {
            if ((this.TwitterFeedSentimentOperationCompleted == null)) {
                this.TwitterFeedSentimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTwitterFeedSentimentOperationCompleted);
            }
            this.InvokeAsync("TwitterFeedSentiment", new object[] {
                        startedIndex,
                        count}, this.TwitterFeedSentimentOperationCompleted, userState);
        }
        
        private void OnTwitterFeedSentimentOperationCompleted(object arg) {
            if ((this.TwitterFeedSentimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TwitterFeedSentimentCompleted(this, new TwitterFeedSentimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostSentimentsFromUclassifyCompletedEventHandler(object sender, GetPostSentimentsFromUclassifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostSentimentsFromUclassifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostSentimentsFromUclassifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void getAllNegativeFeedsOfProfileCompletedEventHandler(object sender, getAllNegativeFeedsOfProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllNegativeFeedsOfProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllNegativeFeedsOfProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void updateAssignedStatusCompletedEventHandler(object sender, updateAssignedStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateAssignedStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateAssignedStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void getNegativeFeedsOfUserCompletedEventHandler(object sender, getNegativeFeedsOfUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNegativeFeedsOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNegativeFeedsOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetTicketsofGroupCompletedEventHandler(object sender, GetTicketsofGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketsofGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketsofGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void FeedSentimentCompletedEventHandler(object sender, FeedSentimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FeedSentimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FeedSentimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void FacebookFeedSentimetCompletedEventHandler(object sender, FacebookFeedSentimetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FacebookFeedSentimetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FacebookFeedSentimetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void FacebookMessageSentimentCompletedEventHandler(object sender, FacebookMessageSentimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FacebookMessageSentimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FacebookMessageSentimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TwitterMessageSentimentCompletedEventHandler(object sender, TwitterMessageSentimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TwitterMessageSentimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TwitterMessageSentimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void TwitterFeedSentimentCompletedEventHandler(object sender, TwitterFeedSentimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TwitterFeedSentimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TwitterFeedSentimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591